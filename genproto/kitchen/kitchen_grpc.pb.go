// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kitchen.proto

package kitchen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KitchenClient is the client API for Kitchen service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Info, error)
	Update(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*UpdatedData, error)
	Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error)
	Fetch(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Kitchens, error)
	Search(ctx context.Context, in *SearchDetails, opts ...grpc.CallOption) (*Kitchens, error)
	ValidateKitchen(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error)
}

type kitchenClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenClient(cc grpc.ClientConnInterface) KitchenClient {
	return &kitchenClient{cc}
}

func (c *kitchenClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Get(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Info, error) {
	out := new(Info)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Update(ctx context.Context, in *NewData, opts ...grpc.CallOption) (*UpdatedData, error) {
	out := new(UpdatedData)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Delete(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Fetch(ctx context.Context, in *Pagination, opts ...grpc.CallOption) (*Kitchens, error) {
	out := new(Kitchens)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) Search(ctx context.Context, in *SearchDetails, opts ...grpc.CallOption) (*Kitchens, error) {
	out := new(Kitchens)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kitchenClient) ValidateKitchen(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/kitchen.Kitchen/ValidateKitchen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenServer is the server API for Kitchen service.
// All implementations must embed UnimplementedKitchenServer
// for forward compatibility
type KitchenServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *ID) (*Info, error)
	Update(context.Context, *NewData) (*UpdatedData, error)
	Delete(context.Context, *ID) (*Void, error)
	Fetch(context.Context, *Pagination) (*Kitchens, error)
	Search(context.Context, *SearchDetails) (*Kitchens, error)
	ValidateKitchen(context.Context, *ID) (*Status, error)
	mustEmbedUnimplementedKitchenServer()
}

// UnimplementedKitchenServer must be embedded to have forward compatible implementations.
type UnimplementedKitchenServer struct {
}

func (UnimplementedKitchenServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedKitchenServer) Get(context.Context, *ID) (*Info, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedKitchenServer) Update(context.Context, *NewData) (*UpdatedData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedKitchenServer) Delete(context.Context, *ID) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedKitchenServer) Fetch(context.Context, *Pagination) (*Kitchens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedKitchenServer) Search(context.Context, *SearchDetails) (*Kitchens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedKitchenServer) ValidateKitchen(context.Context, *ID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateKitchen not implemented")
}
func (UnimplementedKitchenServer) mustEmbedUnimplementedKitchenServer() {}

// UnsafeKitchenServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenServer will
// result in compilation errors.
type UnsafeKitchenServer interface {
	mustEmbedUnimplementedKitchenServer()
}

func RegisterKitchenServer(s grpc.ServiceRegistrar, srv KitchenServer) {
	s.RegisterService(&Kitchen_ServiceDesc, srv)
}

func _Kitchen_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Get(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Update(ctx, req.(*NewData))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Delete(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Pagination)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Fetch(ctx, req.(*Pagination))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).Search(ctx, req.(*SearchDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kitchen_ValidateKitchen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenServer).ValidateKitchen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchen.Kitchen/ValidateKitchen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenServer).ValidateKitchen(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// Kitchen_ServiceDesc is the grpc.ServiceDesc for Kitchen service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kitchen_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitchen.Kitchen",
	HandlerType: (*KitchenServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Kitchen_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Kitchen_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Kitchen_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Kitchen_Delete_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Kitchen_Fetch_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Kitchen_Search_Handler,
		},
		{
			MethodName: "ValidateKitchen",
			Handler:    _Kitchen_ValidateKitchen_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen.proto",
}
